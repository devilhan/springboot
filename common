 ORM --  MVC -- RPC -- SOA -- 微服务
 
 https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features
 
 https://www.bootschool.net/ascii  生成自定义banner
 
 注解的原理： 反射
 
 内置注解：
  @override
  @Deprecated
  @SuppressWarnings -> 抑制编写编译时的警告信息
 
 元注解：
  @Target
  @Retention
  @Document
  @Inherited
  
 SPI：service provider interface
 
 配置文件位置优先级：
      file:./config
      file:./
      classpath:/config/
      classpath:/
      
   devtool  jrebel(需要激活)
   
   springboot 国际化：
     将编码改为UTF-8 
     在resource，目录下创建i18n文件夹
     新增login.properties文件
     新增login_zh_CN.properties文件
     国际化效果此时可以显示出来
     
   
     
     
   源码： 启动  -->  自动装配   --> starter
  
  启动当前应用程序main -->  springapplication.run()  -> new SpringApplication() -->  1.配置resourceloader
                                                              |                      2.判断当前应用程序的类型
                                                             run().启动              3.获取初始化器的实例对象
                                                              |                      4.获取监听器的实例对象
                                                    ConfigurableApplicationContext   5. 找到当前应用程序的主类
                                                       1.设置启动时的时间值 stopwatch
                                                       2.设置应用上下文
                                                       3.设置异常构造器
                                                       4.设置java.awt.headless 为 true
                                                       5.创建监听器对象，springApplicationRunlistener，从配置文件中读取到EventPublishingRunListener
                                                       6.创建eventpublishingrunlistener对象，并创建simpleApplicationEventMulticaster,
                                                         将application 的11个监听器给到了当前对象，此时才能方便我们从中获取出符合监听事件的监听器
                                                       7.装配命令行参数
                                                       8.准备应用程序运行的环境
                                                       
          run()
          new SpringApplication()  //初始化
          public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
           this.resourceLoader = resourceLoader;
           Assert.notNull(primarySources, "PrimarySources must not be null");
           this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));  //primarySources: ""
           this.webApplicationType = WebApplicationType.deduceFromClasspath();  //webApplicationType:servlet  reactive  none
           //以下内容会首先读取到cache中
           setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));  //初始化器
           setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));   //监听器             spring.factories文件  (springboot/autoconfigure)
           //当前类的主函数
           this.mainApplicationClass = deduceMainApplicationClass();
          }
      
          ConfigurableApplicationContext 
            //记录当前程序启动时间
            StopWatch stopWatch = new StopWatch();
            stopWatch.start();
            //创建上下文对象
            ConfigurableApplicationContext context = null;
            //异常报告器
            Collection<SpringBootExceptionReporter> exceptionReporters = new ArrayList<>();
            //设置java.awt.headless 为 true
            configureHeadlessProperty();
            //加载监听器
            SpringApplicationRunListeners listeners = getRunListeners(args);
            listeners.starting();
            try {
             //设置参数值
             ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);
             //配置环境
             ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);
             configureIgnoreBeanInfo(environment);
             Banner printedBanner = printBanner(environment);
             //创建应用上下文
             context = createApplicationContext();
             //从spring.factories中获取failureAnalyzer 
             exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,
               new Class[] { ConfigurableApplicationContext.class }, context);
             //准备应用上下文，向环境中注入参数
             prepareContext(context, environment, listeners, applicationArguments, printedBanner);
             refreshContext(context);
             afterRefresh(context, applicationArguments);
             stopWatch.stop();
             if (this.logStartupInfo) {
              new StartupInfoLogger(this.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);
             }
             listeners.started(context);
             callRunners(context, applicationArguments);
            }
       
          
                                                    
